<?php

class User extends Controller
{

    public function view($f3)
    {
        $userid = $f3->get('PARAMS.3');
        $u = $this->Model->Users->fetch($userid);
        if (empty($u)) {
            $this->Error->notfound();
        }
        $articles = $this->Model->Posts->fetchAll(array('user_id' => $userid));
        $comments = $this->Model->Comments->fetchAll(array('user_id' => $userid));

        $f3->set('u', $u);
        $f3->set('articles', $articles);
        $f3->set('comments', $comments);
    }
    //XSS filter
    function xss_cleaner($input_str) {
        $return_str = str_replace( array('<','>',"'",'"',')','('), array('&lt;','&gt;','&apos;','&#x22;','&#x29;','&#x28;'), $input_str );
        $return_str = str_ireplace( '%3Cscript', '', $return_str );
        return $return_str;
    }
    public function add($f3)
    {
        if ($this->request->is('post')) {
            extract($this->request->data);
            $check = $this->Model->Users->fetch(array('username' => $username));
            if (!empty($check)) {
                StatusMessage::add('User already exists', 'danger');
            } else if ($password != $password2) {
                StatusMessage::add('Passwords must match', 'danger');
            } else if ($username == ""){
                // check username not blank
	            StatusMessage::add('Username cannot be blank','danger');
            }else if($password == "") {
	            //check password not blank
		        StatusMessage::add('Password cannot be blank','danger');
	        } else if($email == "") {
		        StatusMessage::add('Email cannot be blank', 'danger');
            }else {
                // Fix Brute Force
                // Using the Google reCAPTCHA
                $settings = $this->Model->Settings;
                $debug = $settings->getSetting('debug');

                $curl = curl_init();
                curl_setopt_array($curl, [
                    CURLOPT_RETURNTRANSFER => 1,
                    CURLOPT_URL => 'https://www.google.com/recaptcha/api/siteverify',
                    CURLOPT_POST => 1,
                    CURLOPT_POSTFIELDS => [
                        'secret' => '6LcACwMeAAAAANOuAUlZqkJIlUbxnw95FG6UgEAl',
                        'response' => $_POST['g-recaptcha-response']
                    ],
                ]);

                $responseKeys = json_decode(curl_exec($curl));

                if ($responseKeys->success || $debug == 1) {
                    // if unsuccessful continue register

                    $user = $this->Model->Users;
                    $user->copyfrom('POST');
                    $user->created = mydate();
                    $user->bio = '';
                    $user->level = 1;
                    //XSS Fix
                    $user->username = $this->xss_cleaner($username);
                    $user->displayname = $this->xss_cleaner($displayname);
                    if (empty($displayname)) {
                        $user->displayname = $user->username;
                    }
                    //Generate random IDs
                    $user->id = mt_rand();;
                    //Set the users password
                    $user->setPassword($this->xss_cleaner($password));

                    $user->save();
                    StatusMessage::add('Registration complete', 'success');
                    return $f3->reroute('/user/login');
                } else {
                    // if unsuccessful display error
                    StatusMessage::add('Please complete the reCAPTCHA', 'danger');
                    return $f3->reroute('/user/add');
                }
            }
        }
    }

    public function login($f3)
    {
        /** YOU MAY NOT CHANGE THIS FUNCTION - Make any changes in Auth->checkLogin, Auth->login and afterLogin() (AuthHelper.php) */
        if ($this->request->is('post')) {

            //Check for debug mode
            $settings = $this->Model->Settings;
            $debug = $settings->getSetting('debug');

            //Either allow log in with checked and approved login, or debug mode login
            list($username, $password) = array($this->request->data['username'], $this->request->data['password']);
            if (
                ($this->Auth->checkLogin($username, $password, $this->request, $debug) && ($this->Auth->login($username, $password))) ||
                ($debug && $this->Auth->debugLogin($username))) {

                $this->afterLogin($f3);

            } else {
                StatusMessage::add('Invalid username or password', 'danger');
            }
        }
    }

    /* Handle after logging in */
    private function afterLogin($f3)
    {
        StatusMessage::add('Logged in successfully', 'success');

        // Open Redirect Vulnerability
        // filter the url in $_GET['from']
        //Redirect to where they came from
        if (isset($_GET['from']) && !filter_var($_GET['from'], FILTER_VALIDATE_URL)) {
            $f3->reroute($_GET['from']);
        } else {
            $f3->reroute('/');
        }
    }

    public function logout($f3)
    {
        $this->Auth->logout();
        StatusMessage::add('Logged out successfully', 'success');
        $f3->reroute('/');
    }


    public function profile($f3)
    {
        $id = $this->Auth->user('id');
        extract($this->request->data);
        $u = $this->Model->Users->fetch($id);
        $oldpass = $u->password;
        if ($this->request->is('post')) {
            $u->copyfrom('POST');
            if (empty($u->password)) {
                $u->password = $oldpass;
            }

            //Handle avatar upload
            if (isset($_FILES['avatar']) && isset($_FILES['avatar']['tmp_name']) && !empty($_FILES['avatar']['tmp_name'])) {
                $url = File::Upload($_FILES['avatar']);
                $u->avatar = $url;
            } else if (isset($reset)) {
                $u->avatar = '';
            }

            $u->save();
            StatusMessage::add('Profile updated successfully', 'success');
            return $f3->reroute('/user/profile');
        }
        $_POST = $u->cast();
        $f3->set('u', $u);
    }

    public function promote($f3)
    {
        $id = $this->Auth->user('id');
        $u = $this->Model->Users->fetch($id);
        $u->level = 2;
        $u->save();
        return $f3->reroute('/');
    }

}

?>
